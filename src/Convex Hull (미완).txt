// 대표 문제 : BOJ 1708 P5 볼록 껍질
// https://www.acmicpc.net/problem/1708

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Stack;
import java.util.StringTokenizer;

/*	Convex Hull 개요
 * 
 * 	볼록 껍질(Convex Hull)
 * 
 * */

class Hull{
	int y;
    int x;
    
    Hull(int y, int x){
        this.y = y;
        this.x = x;
    }
}

public class ConvexHull {
    
    public static void main(String[] args) throws Exception {
    	
    	// 1. 입력
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        int N = Integer.parseInt(br.readLine());	// 점의 개수
        Hull[] list = new Hull[N];
        
        for(int i = 0; i < N; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());    
            list[i] = new Hull(y, x);
        }
        
        
        // 2. 컨벡스 헐
        Stack<Integer> stack = convexHull(list);
        
        
        // 3. 출력
        System.out.println(stack.size());
    }
    
    
    private static Stack<Integer> convexHull(Hull[] list) {
    	
    	int N = list.length - 1;
    	
    	// 1. 기준점 선정 (y값, x값이 제일 작은 점)
        for(int i = 0; i < N; i++){
            if(list[0].y > list[i].y || list[0].y == list[i].y && list[0].x > list[i].x){
                Hull temp = list[0];
                list[0] = list[i];
                list[i] = temp;
            }
        }
        
        
        // 2. 기준점 기준으로 반시계방향으로 정렬
        Arrays.sort(list, 1, N, new Comparator<Hull>() {
            @Override
            public int compare(Hull a, Hull b) {
                int v = ccw(new Hull(list[1].x, list[1].y), a, b);
                if(v > 0) return -1;
                if(v < 0) return 1;
                return (Math.abs(a.x) + a.y) - (Math.abs(b.x) + b.y);
            }
        });
        
        // 3. stack 
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        for(int i = 1; i < N; i++){
            while(stack.size() > 1 && ccw(list[stack.get(stack.size()-2)], list[stack.peek()], list[i]) <=0 ){
                stack.pop();
            }
            stack.add(i);
        }
    	
		return stack;
	}

	private static int ccw(Hull A, Hull B, Hull C) {
        
        long S = (long)(B.x - A.x) * (C.y - A.y) - (long)(C.x-A.x) * (B.y-A.y);
        
        if (S > 0) return 1;
        else if (S < 0) return -1;
        else return 0;
    }
    
}